<section class="spy-layout plain text-columns">
<h3>The Template Component</h3>

<p>
    The template <code>angularjs</code> component allows for the asynchronous injection of content into the current view.
    To enable templates, load the module <code>spyTemplate</code> inside your <code>spy-app</code> declaration.
</p>

<h5>Markup</h5>

<p>Templates can be created by either using the directive <code>spy-template</code> or invoking the <code>TemplateController</code> directly.</p>

<pre><code class="html">&lt;any
    ng-controller=&quot;TemplateController&quot;
    src=&quot;/path/to/template/data&quot;
    model=&quot;{&hellip;}&quot;
    name=&quot;unique_scope_name&quot;
    channel=&quot;event-channel-1,event-channel-2,&hellip;&quot;
&gt;&hellip;&lt;/any&gt;</code></pre>

<pre><code class="html">&lt;spy-template
    src=&quot;/path/to/template/data&quot;
    model=&quot;{&hellip;}&quot;
    name=&quot;unique_scope_name&quot;
    channel=&quot;event-channel-1 event-channel-2,&hellip;&quot;
&gt;&hellip;&lt;/any&gt;</code></pre>

<dl>
    <dt>src</dt>
    <dd>The model source url</dd>

    <dt>model</dt>
    <dd>String representation of a JSON Array containing a model</dd>
    <dd>The <code>model</code> attribute is optional and can be used to supply a model without calling the <code>read()</code> method on the scope.</dd>

    <dt>name</dt>
    <dd>The view-unique name of the scope</dd>
    <dd>The <code>name</code> attribute is optional but required if the scope needs to be referenced inside event listeners.</dd>

    <dt>channel</dt>
    <dd>A comma separated list of event channels.</dd>
    <dd>
        The <code>channel</code> attribute is optional.
        If missing the scope will <code>$emit()</code> on the global channel.
    </dd>
</dl>

<h5>Scope methods</h5>

<dl>
    <dt>read()</dt>
    <dd>Retrieves an updated model from the server.</dd>
    <dd>
        Emits an event that is catchable using the <code>spy-template-read</code> listener.
        Inside the listener the model fields are accessible by referencing <code>$argument</code>.
    </dd>
</dl>

<h5>Request</h5>

<p>Template requests are static <code>GET</code> requests to the source referenced in the <code>src</code> property of it's markup.</p>

<h5>Response</h5>

<p>
    The template response is a JSON <code>Array</code> of <code>Objects</code>, each containing a uniquely identifiable name and a type attribute.
    Items with a type of <code>&quot;field&quot;</code> also include an attribute <code>&quot;value&quot;</code> containing the included content.
    Items with a type of <code>&quot;group&quot;</code> include an attribute <code>&quot;fields&quot;</code> containing an arbitrary number of children of the item.
    The view will additionally expose all items through their name attributes.
</p>

<pre><code class="json">{
    &quot;content&quot; : [
        {
            &quot;name&quot;   : &quot;&lt;unique identifiable name&gt;&quot;,
            &quot;type&quot;   : &quot;field&quot;,
            &quot;value&quot;  : boolean|string|number|null,
        }, {
            &quot;name&quot;   : &quot;&lt;unique identifiable name&gt;&quot;,
            &quot;type&quot;   : &quot;group&quot;,
            &quot;fields&quot; : [&hellip;]
        }, &hellip;
    ]
}</code></pre>

<h5>Event Listeners</h5>

<p>
    The template component emits events accessible through the listeners <code>spy-template-read</code> and <code>spy-template-error</code>,
    which will be invoked after reading data from the server was either successful or failed.
</p>

 <pre><code class="html">&lt;any
    spy-template-read|spy-template-error=&quot;&lt;expression&gt;&quot;
    scope=&quot;&lt;named scope&gt;&quot;
    channel=&quot;&lt;event-channel-1,event-channel-2,&hellip;&gt;&quot;
&gt;&lt;/any&gt;</code></pre>

<dl>
    <dt>scope</dt>
    <dd>The name of the view-unique named scope inside which to run <code>expression</code></dd>
    <dd>The <code>scope</code> attribute is optional. If missing, <code>expression</code> will run inside the local scope</dd>

    <dt>channel</dt>
    <dd>Comma separated list of event channels.</dd>
    <dd>The <code>channels</code> attribute is optional. If missing, the listener will only react to events on the global channel</dd>
</dl>

<h5>Example</h5>

<p>The template for this example can be found at <code>@UiExample/Partials/Template/index.twig</code></p>
</section>

<spy-template
    class="spy-layout sparse"
    src="/uiexample/template/uiexample"
    model='[{"name":"title","value":"Ui Example Template"}]'
    channel="example"
>
    <h3>{[{ field.title.value }]}</h3>
</spy-template>
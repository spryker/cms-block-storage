{# constant #}
{% macro addConstant(constant) %}
    const {{ constant.name }} = '{{ constant.value }}';
{% endmacro %}

{# metadata #}
{% macro addMetadata(normalizedProperties) %}
    /**
     * @var array
     */
    protected $transferMetadata = [
    {% for property in normalizedProperties %}
    self::{{ property.propertyConst }} => [
          'type' => '{{ property.type_fully_qualified }}',
          'name_underscore' => '{{ property.name_underscore }}',
          'is_collection' => {{ property.is_collection ? 'true' : 'false' }},
          'is_transfer' => {{ property.is_transfer ? 'true' : 'false' }},
        ],
    {% endfor -%}
];
{% endmacro %}

{# property #}
{% macro addProperty(property) %}
    /**
     * @var {{ property.type }}
     */
    protected ${{ property.name }}{% if property.type == 'array' %} = []{% endif %};
{% endmacro %}

{# constructor #}
{% macro addConstructor(properties) %}
{% if properties %}
    public function __construct()
    {
{% for property, collectionType in properties %}
        $this->{{ property }} = new {{ collectionType }}();
{% endfor %}
    }
{% endif %}
{% endmacro %}

{# set method #}
{%- macro addSet(method) %}
    /**
{% if method.bundles is defined %}
     * @bundle {{ method.bundles|join('|') }}
     *
{% endif %}
     * @param {{ method.var }}{% if method.hasDefaultNull %}|null{% endif %} ${{ method.property }}
     *
     * @return self
     */
    public function {{ method.name }}({% if method.typeHint %}{{ method.typeHint }} {% endif %}${{ method.property }}{% if method.hasDefaultNull %} = null{% endif %})
    {
        {% if method.assertNotTransferObject -%}
            $this->assertNotTransferObject(${{ method.property }});

        {% endif -%}
        $this->{{ method.property }} = ${{ method.property }};
        $this->addModifiedProperty(self::{{ method.propertyConst }});

        return $this;
    }
{% endmacro -%}

{# get method #}
{%- macro addGet(method) %}
    /**
{% if method.bundles is defined %}
     * @bundle {{ method.bundles|join('|') }}
     *
{% endif %}
     * @return {{ method.return }}
     */
    public function {{ method.name }}()
    {
        return $this->{{ method.property }};
    }
{% endmacro -%}

{# add method #}
{%- macro addAdd(method) %}
    /**
{% if method.bundles is defined %}
     * @bundle {{ method.bundles|join('|') }}
     *
{% endif %}
     * @param {{ method.var }} ${{ method.property }}
     *
     * @return self
     */
    public function {{ method.name }}({% if method.typeHint %}{{ method.typeHint }} {% endif %}${{ method.property }})
    {
        $this->{{ method.parent }}[] = ${{ method.property }};
        $this->addModifiedProperty(self::{{ method.propertyConst }});

        return $this;
    }
{% endmacro -%}

{# require method #}
{%- macro addRequire(method) %}
    /**
{% if method.bundles is defined %}
     * @bundle {{ method.bundles|join('|') }}
     *
{% endif %}
     * @throws RequiredTransferPropertyException
     *
     * @return self
     */
    public function {{ method.name }}()
    {
{% if method.isCollection %}
        $this->assertCollectionPropertyIsSet(self::{{ method.propertyConst }});
{% else %}
        $this->assertPropertyIsSet(self::{{ method.propertyConst }});
{% endif %}

        return $this;
    }
{% endmacro -%}

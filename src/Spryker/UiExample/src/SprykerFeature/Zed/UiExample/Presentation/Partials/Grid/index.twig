<section class="spy-layout plain text-columns">
<h3>The Grid Component</h3>

<p>
    The grid <code>angularjs</code> component supplies asynchronously operating view of collections of data
    To enable the grid component, load the module <code>spyGrid</code> inside your <code>spy-app</code> declaration.
</p>

<h5>Markup</h5>

<p>Grids can be created by invoking the <code>GridController</code>.</p>

<pre><code class="html">&lt;any
    ng-controller=&quot;GridController&quot;
    src=&quot;/path/to/grid/source&quot;
    name=&quot;unique_scope_name&quot;
    channel=&quot;event-channel-1,event-channel-2,&hellip;&quot;
&gt;&hellip;&lt;/any&gt;</code></pre>

<dl>
    <dt>src</dt>
    <dd>The model source url</dd>

    <dt>name</dt>
    <dd>The view-unique name of the scope.</dd>
    <dd>The <code>name</code> attribute is optional but required if the scope needs to be referenced inside event listeners.</dd>

    <dt>channel</dt>
    <dd>A comma separated list of event channels.</dd>
    <dd>
        The <code>channel</code> attribute is optional.
        If missing the scope will <code>$emit()</code> on the global channel.
    </dd>
</dl>

<h5>Scope methods</h5>

<dl>
    <dt>read()</dt>
    <dd>Retrieves an updated model from the server.</dd>
    <dd>
        Emits an event that is catchable using the <code>spy-template-read</code> listener.
        Inside the listener the model fields are accessible by referencing <code>$argument</code>.
    </dd>
</dl>

<h5>Request</h5>

<p>
    Grid requests are <code>GET</code> requests to the source referenced in the <code>src</code> property of its markup.
    Grid requests use query string parameters to submit the state of its filters.
</p>

<dl>
    <dt>items</dt>
    <dd>The number of items per page.</dd>

    <dt>page</dt>
    <dd>The requested page.</dd>

    <dt>sort</dt>
    <dd>The column the request should be sorted by.</dd>
    <dd>The sort parameter is optional.</dd>

    <dt>dir</dt>
    <dd>The sorting order, either <code>asc</code> or <code>desc</code>.</dd>
    <dd>The dir parameter is optional.</dd>

    <dt>filter[*]</dt>
    <dd>Each filter is represented by an attribute named filter[], with the column name inside the brackets.</dd>
    <dd>There can any number of filter parameters.</dd>
</dl>

<h5>Response</h5>

<p>
    The grid response is a JSON <code>Object</code> containing the properties <code>columns</code> containing the column configuration,
    <code>rows</code> containing the grid data <code>pages</code> containing the current page and the currently available number of pages.
</p>

<pre><code class="json">{
    &quot;content&quot; : {
        &quot;columns&quot; : {
            &quot;&lt;column identifier&gt;&quot; : {
                &quot;name&quot;       : &quot;&lt;column identifier&gt;&quot;,
                &quot;sortable&quot;   : true|false,
                &quot;filterable&quot; : true|false
            },
            &hellip;
        },
        &quot;rows&quot;    : [{
            &quot;&lt;column identifier&gt;&quot; : boolean|string|number,
            &hellip;
        }],
        &quot;pages&quot;   : &lt;number of pages&gt;,
        &quot;page&quot;    : &lt;current page&gt;
    }
}</code></pre>

<h5>Event Listeners</h5>

<p>
    The grid component emits events accessible through the listeners <code>spy-grid-read</code> and <code>spy-grid-error</code>,
    which will be invoked after reading data from the server was either successful or failed.
</p>

<pre><code class="html">&lt;any
    spy-grid-read|spy-grid-error=&quot;&lt;expression&gt;&quot;
    scope=&quot;&lt;named scope&gt;&quot;
    channel=&quot;&lt;event-channel-1,event-channel-2,&hellip;&gt;&quot;
&gt;&lt;/any&gt;</code></pre>

<dl>
    <dt>scope</dt>
    <dd>The name of the view-unique named scope inside which to run <code>expression</code>.</dd>
    <dd>The <code>scope</code> attribute is optional. If missing, <code>expression</code> will run inside the local scope.</dd>

    <dt>channel</dt>
    <dd>Comma separated list of event channels.</dd>
    <dd>The <code>channels</code> attribute is optional. If missing, the listener will only react to events on the global channel.</dd>
</dl>

<h5>Example</h5>

<p>The template for this example can be found at <code>@UiExample/Partials/Grid/index.twig</code>.</p>
</section>

<section
    class="spy-grid spy-interactive"
    ng-controller="GridController"
    src="/uiExample/grid/uiExample"
    name="grid"
    ng-class="{ query : queryActive }"
>
    <h3>Ui Example Grid</h3>

    <div spy-grid-pages="pages" labels="{ items : 'Show %n items', pages : 'Page %n of %m' }"></div>

    <table>
        <thead>
            <tr>
                <th spy-grid-head="columns['column_for_string']" label="String Column"></th>
                <th spy-grid-head="columns['column_for_boolean']" label="Boolean Column"></th>
                <th spy-grid-head="columns['column_for_timestamp']" label="Datetime Column"></th>
            </tr>
        </thead>

        <tbody>
            <tr ng-repeat="row in rows">
                <td>{[{ row['column_for_string'] }]}</td>
                <td><div spy-action-switch="/null" state="row['column_for_boolean']"></div></td>
                <td>{[{ row['column_for_timestamp'] }]}</td>
            </tr>
            <tr ng-if="!rows.length">
                <td colspan="3">No results found</td>
            </tr>
        </tbody>
    </table>

    <div spy-grid-pages="pages" labels="{ items : 'Show %n items', pages : 'Page %n of %m' }"></div>
</section>
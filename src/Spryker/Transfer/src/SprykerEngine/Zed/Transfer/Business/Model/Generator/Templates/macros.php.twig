{% macro addProperty(property) %}
    /**
     * @var {{ property.var }} ${{ property.name }}
     */
    protected ${{ property.name }}{% if property.defaultValue is defined and property.defaultValue != '' %} = {{ property.defaultValue|quotedIfNotIntegers }}{% endif %};
{% endmacro %}


{% macro addConstructor(properties) %}
{% if properties %}
    public function __construct()
    {
        {% for name, collectionType in properties -%}
            $this->{{ name }} = new {{ collectionType }}();
        {% endfor %}
    }
{% endif %}
{% endmacro %}


{% macro addSetter(parameter) -%}
{% import _self as mcr %}
{%- if parameter.isCollection -%}{{ mcr.setHeader(parameter, 'array') }}{% else %}{{ mcr.setHeader(parameter, parameter.type) }}{%- endif %}
    {
        $this->{{ parameter.passedParameter }}{{ writeIf('[]', 'array', parameter.type) }} = ${{ parameter.passedParameter }};
        $this->addModifiedProperty('{{ parameter.passedParameter }}');

        return $this;
    }
{%- if parameter.isCollection %}

    /**
     * @var {{ parameter.var }} ${{ parameter.passedParameter|singular }}
     *
     * @return $this
     */
    public function add{{ parameter.name|singular|camelCase }}({{ writeIfNot(parameter.type~' ', '(^string)', parameter.type)|changeArrayType }}${{ parameter.passedParameter|singular }})
    {
        $this->{{ parameter.passedParameter }}->append(${{ parameter.passedParameter|singular }});
        $this->addModifiedProperty('{{ parameter.passedParameter }}');

        return $this;
    }

    /**
     * @var {{ parameter.var }} ${{ parameter.passedParameter|singular }}
     *
     * @return $this
     */
    public function remove{{ parameter.name|singular|camelCase }}({{ writeIfNot(parameter.type~' ', '(^string)', parameter.type)|changeArrayType }}${% if parameter.isCollection %}{{ parameter.passedParameter|singular }}{% else %}{{ parameter.passedParameter|singular }}{% endif %})
    {
        if ($this->{{ parameter.passedParameter }}->has(${{ parameter.passedParameter|singular }})) {
            $this->{{ parameter.passedParameter }}->remove(${{ parameter.passedParameter|singular }});
        }
        $this->addModifiedProperty('{{ parameter.passedParameter }}');

        return $this;
    }

{%- endif -%}
{%- if parameter.type == 'array' %}

    /**
     * @var mixed ${{ parameter.passedParameter|singular }}
     *
     * @return $this
     */
    public function add{{ parameter.name|singular|camelCase }}(${{ parameter.passedParameter|singular }})
    {
        $this->{{ parameter.passedParameter }}[] = ${{ parameter.passedParameter|singular }};
        $this->addModifiedProperty('{{ parameter.passedParameter }}');

        return $this;
    }

{%- endif -%}
{%- endmacro -%}

{% macro setHeader(parameter, type) %}
{% if parameter.isCollection %}
    {% set varAttribute = parameter.passedParameter|singular -%}
{% else %}
    {% set varAttribute = parameter.passedParameter -%}
{% endif %}

    /**
     * @var {% if parameter.var %}{{ parameter.var }} {% endif %}${{ varAttribute }}
     *
     * @return $this
     */
    public function set{{ parameter.name|camelCase }}({% if parameter.type %}{{ parameter.type }} {% endif %}${{ parameter.passedParameter }})
{% endmacro %}

{% macro addGetter(parameter) %}

    /**
    * @return {{ parameter.var }}
    */
    public function get{{ parameter.name|camelCase }}()
    {
        return $this->{{ parameter.passedParameter }};
    }
{% endmacro %}

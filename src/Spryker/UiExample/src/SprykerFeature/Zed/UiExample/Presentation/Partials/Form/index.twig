<section class="spy-layout plain text-columns">
<h3>The Form Component</h3>

<p>
    The forms <code>angularjs</code> component supplies asynchronously operating forms.
    The enable the form component, load the module <code>spyForm</code> inside your <code>spy-app</code> declaration.
</p>

<h5>Markup</h5>

<p>Forms can be created by either using the directive <code>spy-form</code> or invoking the <code>FormController</code> directly.</p>

<pre><code class="html">&lt;any
    ng-controller=&quot;FormController&quot;
    src=&quot;/path/to/form/source&quot;
    model=&quot;{&hellip;}&quot;
    name=&quot;unique_scope_name&quot;
    channel=&quot;event-channnel-1,event-channel-2,&hellip;&quot;
&gt;&hellip;&lt;/any&gt;</code></pre>

<pre><code class="html">&lt;spy-form
    src=&quot;/path/to/form/source&quot;
    model=&quot;{&hellip;}&quot;
    name=&quot;unique_scope_name&quot;
    channel=&quot;event-channel-1,event-channel-2,&hellip;&quot;
&gt;&hellip;&lt;/spy-form&gt;</code></pre>

<dl>
    <dt>src</dt>
    <dd>The model source url</dd>

    <dt>model</dt>
    <dd>String representation of a JSON Array containing a model</dd>
    <dd>The <code>model</code> attribute is optional and can be used to supply a model without calling the <code>read()</code> method on the scope.</dd>

    <dt>name</dt>
    <dd>The view-unique name of the scope</dd>
    <dd>The <code>name</code> attribute is optional but required if the scope needs to be referenced inside event listeners.</dd>

    <dt>channel</dt>
    <dd>A comma separated list of event channels.</dd>
    <dd>
        The <code>channel</code> attribute is optional.
        If missing the scope will <code>$emit()</code> on the global channel.
    </dd>
</dl>

<h5>Scope methods</h5>

<dl>
    <dt>read()</dt>
    <dd>Retrieves a new model from the server.</dd>
    <dd>Optionally takes a flat <code>Object</code> as it's first argument used to seed the form.</dd>
    <dd>
        Emits an event that is catchable using the <code>spy-form-read</code> listener.
        Inside the listener, the model fields are accessible by referencing <code>$argument</code>.
    </dd>

    <dt>test()</dt>
    <dd>Sends the current model to the server for validation.</dd>
    <dd>
        Emits an event that is catchable using the <code>spy-form-read</code> listener.
        Inside the listener, the model fields are accessible by referencing <code>$argument</code>.
    </dd>

    <dt>update()</dt>
    <dd>Sends the current model to the server for submission.</dd>
    <dd>
        Emits an event that is catchable using the <code>spy-form-update</code> listener if the model validates
        or by the <code>spy-form-read</code> listener if the model does not validate.
        Inside the listener, the model fields are accessible by referencing <code>$argument</code>.
    </dd>

    <dt>abort()</dt>
    <dd>Aborts the current form operation.</dd>
    <dd>
        Emits an event that is catchable using the <code>spy-form-abort</code> listener.
    </dd>
</dl>

<h5>Request</h5>

<p>
    Form requests are either <code>POST</code> if the intent is to retrieve an updated model or <code>PUT</code> if the intent is to save the local model.
    The model is sent as a flat JSON Object representing key-value pairs
</p>

<pre><code class="json">{
    &quot;&lt;field identifier&gt;&quot; : &lt;boolean|string|number|null&gt;,
    &hellip;
}</code></pre>

<h5>Response</h5>

<p>
    The form response is a JSON <code>Object</code> containing the model state and an <code>Array</code> of form fields.
    Fields with a type of <code>&quot;field&quot;</code> include the fields required for transmission of field state.
    Fields with a type of <code>&quot;group&quot;</code> include a <code>&quot;fields&quot;</code> attribute containing an arbitrary number of child fields.
    The view will additionally expose all items through their name attributes.
</p>

<pre><code class="json">{
    &quot;content&quot; : {
        &quot;state&quot; : &quot;&lt;new|fail|success&gt;&quot;,
        &quot;fields&quot; : [
            {
                &quot;name&quot;        : &quot;&lt;field identifier&gt;&quot;,
                &quot;type&quot;        : &quot;field&quot;,
                &quot;label&quot;       : &quot;&lt;translated field label&gt;&quot;|null,
                &quot;value&quot;       : boolean|string|number|null,
                &quot;refresh&quot;     : true|false,
                &quot;accepts&quot;     : [{
                    &quot;value&quot; : &quot;&lt;permissible value&gt;&quot;,
                    &quot;label&quot; : &quot;&lt;permissible translated label&gt;&quot;
                }],
                &quot;messages&quot;    : [
                    &quot;&lt;validation error message&gt;&quot;
                ],
                &quot;constraints&quot; : [
                    &quot;&lt;&gt;&quot;
                ]
            }, {
                &quot;name&quot;        : &quot;&lt;field identifier&gt;&quot;,
                &quot;type&quot;        : &quot;group&quot;,
                &quot;fields&quot;      : [&hellip;],
            }, &hellip;
        ]
    }
}</code></pre>

<h5>Event Listeners</h5>

<p>
    The form component emits events accessible through the listeners <code>spy-form-read</code>, <code>spy-form-abort</code>, <code>spy-form-update</code> and <code>spy-form-error</code>,
    which will be invoked after reading from or submitting to the server was either successful or failed,
    or the user aborted the form submission through the <code>abort()</code> method of the scope.
</p>

<pre><code class="html">&lt;any
    spy-form-read|spy-form-update|spy-form-abort|spy-form-error=&quot;&lt;expression&gt;&quot;
    scope=&quot;&lt;named scope&gt;&quot;
    channel=&quot;&lt;event-channel-1,event-channel-2,&hellip;&gt;&quot;
&gt;&lt;/any&gt;</code></pre>

<dl>
    <dt>scope</dt>
    <dd>The name of the view-unique named scope inside which to run <code>expression</code></dd>
    <dd>The <code>scope</code> attribute is optional. If missing, <code>expression</code> will run inside the local scope</dd>

    <dt>channel</dt>
    <dd>Comma separated list of event channels.</dd>
    <dd>The <code>channels</code> attribute is optional. If missing, the listener will only react to events on the global channel</dd>
</dl>

<h5>Example</h5>

<p>The template for this example can be found at <code>@UiExample/Partials/Form/index.twig</code></p>
</section>

<spy-form
    class="spy-layout sparse"
    src="/uiexample/form/uiexample"
    model='{"fields":[{"name":"id_ui_example","type":"field","label":null,"value":null,"refresh":false,"accepts":[],"messages":[],"extra":[],"constraints":{}},{"name":"column_for_string","type":"field","label":null,"value":null,"refresh":false,"accepts":[],"messages":[],"extra":[],"constraints":{}},{"name":"column_for_boolean","type":"field","label":null,"value":null,"refresh":false,"accepts":[],"messages":[],"extra":[],"constraints":{"type":"boolean"}},{"name":"vehicle","type":"field","label":null,"value":"Copter","refresh":true,"accepts":[{"value":"Car","label":"Car"},{"value":"Copter","label":"Copter"}],"messages":[],"extra":[],"constraints":{"type":"string"}},{"name":"column_for_datetime","type":"field","label":null,"value":null,"refresh":false,"accepts":[],"messages":[],"extra":[],"constraints":{"type":"string"}},{"name":"vehicle_specs","type":"group","fields":[{"name":"motor_amount","type":"field","label":"Amount of motors","value":5,"refresh":false,"accepts":[],"messages":[],"extra":[],"constraints":{"type":"integer"}}]}],"state":"new"}'
    channel="example"
>
    <h3>Ui Example Form</h3>

    <div spy-input-text="field.column_for_string" options="{ label : 'Any string' }"></div>
    <div spy-input-text="field.column_for_datetime" options="{ label : 'Any datetime string (Seems like we still need a DateTimeInput directive)' }"></div>
    <div spy-input-select="field.vehicle" options="{ label : 'Vehicle' }"></div>
    <div spy-fieldset="field.vehicle_specs"></div>
    <div spy-input-switch="field.column_for_boolean" options="{ label : 'Check it or die try\'in' }"></div>

    <div class="spy-layout buttons">
        <button class="button default" type="submit" ng-disabled="query" ng-click="update()">Update</button>
    </div>
</spy-form>